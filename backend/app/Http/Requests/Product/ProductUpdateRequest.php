<?php

namespace App\Http\Requests\Product;

use App\Traits\HandlesValidationFailure;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProductUpdateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    use HandlesValidationFailure;
    public function authorize(): bool
    {

        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */

    public function rules()
    {
        $rules = [
            'name' => 'nullable|string|max:255',
            'price' => 'nullable|numeric|between:0,99999999.99',
            'sku' => [
                'required',
                'string',
                Rule::unique('products', 'sku')->ignore($this->route('product')), // S·ª≠a $productId th√†nh $this->route('product')
            ],
            'description' => 'nullable|string',
            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:10240',
            'product_type' => 'nullable|in:simple,variable',
            'status' => 'nullable|in:active,inactive',
            'category_id' => 'nullable|exists:categories,id',

            // Ki·ªÉm tra bi·∫øn th·ªÉ
            'variants' => [
                'nullable',
                'array',
                function ($attribute, $value, $fail) {
                    if ($this->input('product_type') === 'variable' && empty($value)) {
                        $fail('S·∫£n ph·∫©m c√≥ bi·∫øn th·ªÉ th√¨ ph·∫£i c√≥ √≠t nh·∫•t m·ªôt bi·∫øn th·ªÉ.');
                    }
                }
            ],
            'variants.*.id' => 'nullable|exists:product_variants,id',
            'variants.*.price' => 'nullable|numeric|min:0',
            'variants.*.stock' => 'required_if:product_type,variable|integer|min:0',
            'variants.*.attributes' => 'required_if:product_type,variable|array|min:1',
            'variants.*.attributes.*.attribute_id' => [
                'required_if:product_type,variable',
                'exists:attributes,id',
            ],
            'variants.*.attributes.*.attribute_value_id' => [
                'required_if:product_type,variable',
                'exists:attribute_values,id',
                function ($attribute, $value, $fail) {
                    $variantIndex = explode('.', $attribute)[1];

                    // Ki·ªÉm tra attribute_value_id c√≥ h·ª£p l·ªá kh√¥ng
                    $attributeValue = \App\Models\AttributeValue::find($value);
                    if (!$attributeValue) {
                        return $fail("Gi√° tr·ªã thu·ªôc t√≠nh kh√¥ng h·ª£p l·ªá.");
                    }

                    $attributeId = $attributeValue->attribute_id;
                    $variantAttributes = $this->input("variants.{$variantIndex}.attributes", []);

                    // üõë Ki·ªÉm tra m·ªôt bi·∫øn th·ªÉ c√≥ nhi·ªÅu gi√° tr·ªã c·ªßa c√πng m·ªôt thu·ªôc t√≠nh kh√¥ng
                    $count = collect($variantAttributes)->where('attribute_id', $attributeId)->count();
                    if ($count > 1) {
                        return $fail("Bi·∫øn th·ªÉ kh√¥ng th·ªÉ c√≥ hai gi√° tr·ªã cho c√πng m·ªôt thu·ªôc t√≠nh.");
                    }

                    // üõë Ki·ªÉm tra gi√° tr·ªã thu·ªôc t√≠nh c√≥ tr√πng gi·ªØa c√°c bi·∫øn th·ªÉ kh√¥ng
                    $productId = $this->route('product');
                    $existsInProduct = \App\Models\ProductAttribute::whereHas('productVariant', function ($query) use ($productId) {
                        $query->where('product_id', $productId);
                    })
                        ->where('attribute_value_id', $value)
                        ->whereNotIn('product_variant_id', [$this->input("variants.{$variantIndex}.id")])
                        ->exists();

                    if ($existsInProduct) {
                        return $fail("Gi√° tr·ªã thu·ªôc t√≠nh n√†y ƒë√£ t·ªìn t·∫°i trong m·ªôt bi·∫øn th·ªÉ kh√°c c·ªßa s·∫£n ph·∫©m.");
                    }
                }
            ],
            'variants.*.images' => 'nullable|array',
            'variants.*.images.*' => 'nullable|string|url',
        ];

        // ‚úÖ C√°ch s·ª≠a l·ªói unique cho variants.*.sku
        foreach ($this->input('variants', []) as $key => $variant) {
            $variantId = $variant['id'] ?? null;
            $rules["variants.$key.sku"] = [
                'required_if:product_type,variable',
                'string',
                Rule::unique('product_variants', 'sku')->ignore($variantId),
            ];
        }

        return $rules;
    }

    public function messages()
    {
        return [
            'sku.unique' => 'SKU n√†y ƒë√£ t·ªìn t·∫°i.',
            'price.numeric' => 'Gi√° ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá.',
            'price.between' => 'Gi√° ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 0 ƒë·∫øn 99999999.99.',
            'image.image' => 'H√¨nh ·∫£nh ph·∫£i l√† m·ªôt file ·∫£nh.',
            'image.mimes' => 'H√¨nh ·∫£nh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng: jpeg, png, jpg, gif, svg.',
            'image.max' => 'H√¨nh ·∫£nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB.',
            'category_id.exists' => 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i.',
            'variants.required_if' => 'Bi·∫øn th·ªÉ s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc khi lo·∫°i s·∫£n ph·∫©m l√† variable.',
            'variants.*.sku.required_if' => 'SKU c·ªßa bi·∫øn th·ªÉ l√† b·∫Øt bu·ªôc khi lo·∫°i s·∫£n ph·∫©m l√† variable.',
            'variants.*.attributes.*.attribute_id.exists' => 'Thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.',
            'variants.*.attributes.*.attribute_value_id.exists' => 'Gi√° tr·ªã thu·ªôc t√≠nh kh√¥ng t·ªìn t·∫°i.',
        ];
    }
}
