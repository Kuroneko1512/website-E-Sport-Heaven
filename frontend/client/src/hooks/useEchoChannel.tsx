import { useEffect, useState, useRef } from 'react';
import Echo from 'laravel-echo';
import io from 'socket.io-client';

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho tr·∫°ng th√°i k·∫øt n·ªëi
interface ConnectionState {
    connected: boolean;
    error: string | null;
    socketId: string | null;
    isSubscribed: boolean;
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho window v·ªõi Echo instance
declare global {
    interface Window {
        io: typeof io;
        echoInstance: any; // S·ª≠ d·ª•ng any ƒë·ªÉ tr√°nh l·ªói namespace
    }
}

/**
 * Custom hook ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi Laravel Echo v√† ƒëƒÉng k√Ω k√™nh
 * @param {string} channelName - T√™n k√™nh c·∫ßn ƒëƒÉng k√Ω (v√≠ d·ª•: 'orders.1')
 * @param {string} eventName - T√™n s·ª± ki·ªán c·∫ßn l·∫Øng nghe (v√≠ d·ª•: '.order-status-updated')
 * @param {function} callback - H√†m callback khi nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán
 * @returns {object} - Tr·∫°ng th√°i k·∫øt n·ªëi v√† c√°c ph∆∞∆°ng th·ª©c
 */
const useEchoChannel = (
    channelName: string,
    eventName: string,
    callback: (event: any) => void
) => {
    // Tr·∫°ng th√°i k·∫øt n·ªëi
    const [connectionState, setConnectionState] = useState<ConnectionState>({
        connected: false,
        error: null,
        socketId: null,
        isSubscribed: false
    });

    // S·ª≠ d·ª•ng useRef ƒë·ªÉ l∆∞u tr·ªØ instance Echo v√† tr√°nh t·∫°o m·ªõi m·ªói l·∫ßn render
    const echoRef = useRef<any>(null);
    const channelRef = useRef<any>(null);
    const callbackRef = useRef(callback);
    
    // C·∫≠p nh·∫≠t callbackRef khi callback thay ƒë·ªïi
    useEffect(() => {
        callbackRef.current = callback;
    }, [callback]);

    // Kh·ªüi t·∫°o Echo instance n·∫øu ch∆∞a c√≥ - CH·ªà CH·∫†Y M·ªòT L·∫¶N
    useEffect(() => {
        // Ch·ªâ kh·ªüi t·∫°o Echo m·ªôt l·∫ßn
        if (!window.echoInstance) {
            window.io = io;

            // Kh·ªüi t·∫°o Echo instance
            window.echoInstance = new Echo({
                broadcaster: 'socket.io',
                host: '127.0.0.1:6001',
                transports: ['polling', 'websocket'],
                forceTLS: false,
                // C·∫•u h√¨nh Socket.io
                options: {
                    pingTimeout: 60000,
                    pingInterval: 25000,
                    reconnection: true,
                    reconnectionAttempts: Infinity,
                    reconnectionDelay: 1000
                }
            });

            console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o Echo instance m·ªõi');
        }

        // L∆∞u Echo instance v√†o ref
        echoRef.current = window.echoInstance;

        // X·ª≠ l√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
        const socket = echoRef.current.connector.socket;

        const onConnect = () => {
            setConnectionState(prev => ({
                ...prev,
                connected: true,
                error: null,
                socketId: socket.id
            }));
            console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn Echo Server', socket.id);
        };

        const onConnectError = (error: any) => {
            setConnectionState(prev => ({
                ...prev,
                connected: false,
                error: error.message,
                socketId: null
            }));
            console.error('‚ùå L·ªói k·∫øt n·ªëi:', error.message);
        };

        const onDisconnect = (reason: string) => {
            setConnectionState(prev => ({
                ...prev,
                connected: false,
                error: reason,
                socketId: null
            }));
            console.log('‚ùå ƒê√£ ng·∫Øt k·∫øt n·ªëi t·ª´ Echo Server:', reason);
        };

        const onReconnect = (attemptNumber: number) => {
            console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i sau ${attemptNumber} l·∫ßn th·ª≠`);
        };

        // ƒêƒÉng k√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
        socket.on('connect', onConnect);
        socket.on('connect_error', onConnectError);
        socket.on('disconnect', onDisconnect);
        socket.on('reconnect', onReconnect);

        // N·∫øu ƒë√£ k·∫øt n·ªëi, c·∫≠p nh·∫≠t tr·∫°ng th√°i
        if (socket.connected) {
            setConnectionState(prev => ({
                ...prev,
                connected: true,
                error: null,
                socketId: socket.id
            }));
        }

        // Cleanup khi unmount
        return () => {
            socket.off('connect', onConnect);
            socket.off('connect_error', onConnectError);
            socket.off('disconnect', onDisconnect);
            socket.off('reconnect', onReconnect);
        };
    }, []); // Empty dependency array ensures this runs only once

    // ƒêƒÉng k√Ω k√™nh v√† s·ª± ki·ªán - CH·ªà CH·∫†Y KHI CHANNEL NAME HO·∫∂C EVENT NAME THAY ƒê·ªîI
    useEffect(() => {
        // N·∫øu kh√¥ng c√≥ Echo instance, channelName ho·∫∑c eventName, kh√¥ng l√†m g√¨ c·∫£
        if (!echoRef.current || !channelName || !eventName) {
            return;
        }

        // N·∫øu ƒë√£ ƒëƒÉng k√Ω k√™nh n√†y r·ªìi, kh√¥ng l√†m g√¨ c·∫£
        if (channelRef.current && channelRef.current.name === channelName) {
            console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω k√™nh ${channelName} r·ªìi, kh√¥ng c·∫ßn ƒëƒÉng k√Ω l·∫°i`);
            return;
        }

        // H·ªßy ƒëƒÉng k√Ω k√™nh c≈© n·∫øu c√≥
        if (channelRef.current) {
            console.log(`üîÑ H·ªßy ƒëƒÉng k√Ω k√™nh c≈©: ${channelRef.current.name}`);
            echoRef.current.leave(channelRef.current.name);
            channelRef.current = null;
            setConnectionState(prev => ({ ...prev, isSubscribed: false }));
        }

        console.log(`üîÑ ƒêang ƒëƒÉng k√Ω k√™nh: ${channelName}, s·ª± ki·ªán: ${eventName}`);

        // ƒêƒÉng k√Ω k√™nh m·ªõi
        const channel = echoRef.current.channel(channelName);
        channelRef.current = { name: channelName, channel };

        // X·ª≠ l√Ω s·ª± ki·ªán ƒëƒÉng k√Ω th√†nh c√¥ng
        channel.subscribed(() => {
            console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω k√™nh: ${channelName}`);
            setConnectionState(prev => ({ ...prev, isSubscribed: true }));
        });

        // X·ª≠ l√Ω l·ªói ƒëƒÉng k√Ω
        channel.error((error: any) => {
            console.error(`‚ùå L·ªói khi ƒëƒÉng k√Ω k√™nh ${channelName}:`, error);
            setConnectionState(prev => ({
                ...prev,
                isSubscribed: false,
                error: `L·ªói khi ƒëƒÉng k√Ω k√™nh: ${error}`
            }));
        });

        // L·∫Øng nghe s·ª± ki·ªán
        const eventHandler = (event: any) => {
            console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán ${eventName} t·ª´ k√™nh ${channelName}:`, event);
            // S·ª≠ d·ª•ng callbackRef.current ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n g·ªçi phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa callback
            if (callbackRef.current && typeof callbackRef.current === 'function') {
                callbackRef.current(event);
            }
        };

        channel.listen(eventName, eventHandler);

        // Cleanup khi unmount ho·∫∑c khi channelName/eventName thay ƒë·ªïi
        return () => {
            // Kh√¥ng h·ªßy ƒëƒÉng k√Ω k√™nh ·ªü ƒë√¢y ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ li√™n t·ª•c ƒëƒÉng k√Ω/h·ªßy ƒëƒÉng k√Ω
            // Ch√∫ng ta s·∫Ω ch·ªâ h·ªßy ƒëƒÉng k√Ω khi th·ª±c s·ª± c·∫ßn thi·∫øt (khi channelName thay ƒë·ªïi)
        };
    }, [channelName, eventName]); // Ch·ªâ ph·ª• thu·ªôc v√†o channelName v√† eventName

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ thay ƒë·ªïi k√™nh
    const changeChannel = (newChannelName: string) => {
        if (newChannelName === channelRef.current?.name) {
            return; // Kh√¥ng l√†m g√¨ n·∫øu k√™nh kh√¥ng thay ƒë·ªïi
        }

        // H·ªßy ƒëƒÉng k√Ω k√™nh c≈©
        if (channelRef.current && echoRef.current) {
            console.log(`üîÑ Thay ƒë·ªïi k√™nh t·ª´ ${channelRef.current.name} sang ${newChannelName}`);
            echoRef.current.leave(channelRef.current.name);
            channelRef.current = null;
            setConnectionState(prev => ({ ...prev, isSubscribed: false }));
        }
    };

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi
    const disconnect = () => {
        if (channelRef.current && echoRef.current) {
            echoRef.current.leave(channelRef.current.name);
            channelRef.current = null;
            setConnectionState(prev => ({ ...prev, isSubscribed: false }));
        }
    };

    // Tr·∫£ v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi v√† c√°c ph∆∞∆°ng th·ª©c
    return {
        ...connectionState,
        changeChannel,
        disconnect,
        echo: echoRef.current
    };
};

export default useEchoChannel;
